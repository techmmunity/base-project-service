{
	// ================== Editor General Config =====================

	// Defines Prettier as Default Formatter
	"editor.defaultFormatter": "esbenp.prettier-vscode",

	// Add a vertical line on the 80 characters limit
	"editor.rulers": [80],

	// Define Tab Size = 2 Spaces (Half of the Default Size)
	"editor.tabSize": 2,

	// Disable Tab To Space Conversion
	"editor.insertSpaces": false,

	// Disable Identation Detection,
	// Because All The Indentations MUST BE
	// Tabs With 2 Spaces (ﾉ °益°)ﾉ 彡 ┻━┻
	// Setted to true because some
	// OS projects use 4 spaces ou 2 tabs, etc
	"editor.detectIndentation": true,

	// Config Default End Of Line Formatting
	"files.eol": "\n",

	// Enable Format On Save
	"editor.formatOnSave": true,

	// Make ESLint fix all the things that he can on save (like prettier formating)
	"editor.codeActionsOnSave": {
		"source.fixAll.eslint": true
	},

	// Icons
	"workbench.iconTheme": "material-icon-theme",

	// Color of Comments
	"editor.tokenColorCustomizations": {
		"comments": "#00a0eb"
	},

	// Make VSCode understand this files as files of this languages
	"files.associations": {
		".sequelizerc": "javascript",
		".prettierignore": "ignore",
		".lintstagedrc": "json",
		".env.*": "env"
	},

	// ======================= Formatters ===========================

	// Disable prettier on files that conclict with eslint
	"[javascript]": {
		"editor.defaultFormatter": null
	},
	"[typescript]": {
		"editor.defaultFormatter": null
	},
	"[javascriptreact]": {
		"editor.defaultFormatter": null
	},
	"[typescriptreact]": {
		"editor.defaultFormatter": null
	},

	// ================ Languages General Config ====================

	// Eslint
	"eslint.packageManager": "yarn",
	"eslint.validate": [
		"javascript",
		"javascriptreact",
		"typescript",
		"typescriptreact"
	],

	// Material Icon Theme
	"material-icon-theme.folders.associations": {
		"types": "typescript",
		"interfaces": "typescript",
		"redux": "redux-actions",
		"modules": "generator",
		"entities": "class",
		"migrations": "database",
		"@helpers": "utils"
	},
	"material-icon-theme.files.associations": {
		"*.controller.ts": "nest-controller",
		"*.module.ts": "nest-module",
		"*.service.ts": "nest-service",
		"*.middleware.ts": "nest-middleware",
		"*.filter.ts": "nest-filter",
		"*.pipe.ts": "nest-pipe",
		"*.gateway.ts": "nest-gateway",
		"*.decorator.ts": "nest-decorator",
		"*.guard.ts": "nest-guard",
		"*.interceptor.ts": "nest-guard",
		"*.resolver.ts": "graphql",
		"*.input.ts": "graphql",
		"*.return.ts": "graphql"
	},
	"material-icon-theme.languages.associations": {
		"env": "tune"
	},

	// TODO Tree
	"todo-tree.regex.regex": "(//|#|<!--|;|/\\*|^|^\\s*(-|\\d+.))\\s*($TAGS)",
	"todo-tree.general.tags": ["BUG", "HACK", "FIXME", "TODO", "[ ]"],
	"todo-tree.tree.showScanModeButton": false,
	"cSpell.words": ["nestjs", "techmmunity"]
}
